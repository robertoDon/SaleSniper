import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import locale
import io
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
import xlsxwriter
from services.valuation_service import ValuationService

# Configurar locale para portugu√™s do Brasil
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_ALL, '')

def formatar_numero_br(valor, casas_decimais=0):
    """Formata n√∫mero para o padr√£o brasileiro."""
    if isinstance(valor, (int, float)):
        if isinstance(valor, int) or (isinstance(valor, float) and (valor.is_integer() or abs(valor - round(valor)) < 0.001)):
            return f"{int(round(valor)):,}".replace(",", ".")
        return f"{valor:,.{casas_decimais}f}".replace(",", "X").replace(".", ",").replace("X", ".")
    return valor

def formatar_dataframe_br(df):
    """Formata todos os n√∫meros de um DataFrame para o padr√£o brasileiro."""
    df_formatado = df.copy()
    for coluna in df_formatado.columns:
        if pd.api.types.is_numeric_dtype(df_formatado[coluna]):
            df_formatado[coluna] = df_formatado[coluna].apply(lambda x: formatar_numero_br(x))
    return df_formatado

def exportar_para_xlsx(df: pd.DataFrame, nome_arquivo: str):
    """Exporta um DataFrame para arquivo XLSX."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    return output.getvalue()

def exportar_para_pdf(df: pd.DataFrame, nome_arquivo: str):
    """Exporta um DataFrame para arquivo PDF."""
    output = io.BytesIO()
    doc = SimpleDocTemplate(output, pagesize=letter)
    elements = []
    
    data = [df.columns.tolist()] + df.values.tolist()
    table = Table(data)
    
    style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    table.setStyle(style)
    
    elements.append(table)
    doc.build(elements)
    return output.getvalue()

def exibir_botoes_exportacao(df: pd.DataFrame, nome_arquivo: str):
    """Exibe bot√µes para exportar DataFrame em diferentes formatos."""
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.download_button(
            label="üì• CSV",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name=f"{nome_arquivo}.csv",
            mime='text/csv'
        )
    
    with col2:
        st.download_button(
            label="üì• XLSX",
            data=exportar_para_xlsx(df, nome_arquivo),
            file_name=f"{nome_arquivo}.xlsx",
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
    with col3:
        st.download_button(
            label="üì• PDF",
            data=exportar_para_pdf(df, nome_arquivo),
            file_name=f"{nome_arquivo}.pdf",
            mime='application/pdf'
        )



def exibir_valuation():
    st.markdown("<h1 style='color: #FF8C00;'>SaleSniper - Valuation de Empresas</h1>", unsafe_allow_html=True)
    
    st.markdown("""
    ### üìä Calculadora de Valuation Empresarial
    
    Esta ferramenta utiliza os m√©todos mais estabelecidos do mercado para calcular o valuation de sua empresa:
    
    - **M√∫ltiplos de Mercado**: Compara√ß√£o com empresas similares
    - **DCF (Discounted Cash Flow)**: Valor presente dos fluxos futuros
    - **M√©todo Berkus**: Para startups em est√°gio inicial
    - **Scorecard**: Avalia√ß√£o qualitativa e quantitativa
    """)
    
    # Inicializar servi√ßo de valuation
    valuation_service = ValuationService()
    
    # Formul√°rio de dados da empresa
    st.markdown("### üìã Dados da Empresa")
    
    col1, col2 = st.columns(2)
    
    with col1:
        nome_empresa = st.text_input("Nome da Empresa", value="Minha Empresa")
        setor = st.selectbox("Setor", [
            "SaaS", "E-commerce", "Fintech", "Healthtech", "Edtech", "Consultoria", "Outros"
        ])
        tamanho_empresa = st.selectbox("Est√°gio da Empresa", [
            "startup", "scaleup", "estabelecida"
        ])
        receita_anual = st.number_input("Receita Anual (R$)", min_value=0.0, value=1000000.0, step=10000.0)
        
        # Op√ß√£o para detalhar despesas
        detalhar_despesas = st.checkbox("üîç Detalhar Despesas (Opcional)")
        
        if detalhar_despesas:
            st.markdown("**Detalhe suas despesas mensais por categoria:**")
            custos_vendas_mensal = st.number_input("Custos de Vendas (R$/m√™s)", min_value=0.0, value=25000.0, step=1000.0)
            despesas_operacionais_mensal = st.number_input("Despesas Operacionais (R$/m√™s)", min_value=0.0, value=16667.0, step=1000.0)
            despesas_adm_mensal = st.number_input("Despesas Administrativas (R$/m√™s)", min_value=0.0, value=12500.0, step=1000.0)
            despesas_marketing_mensal = st.number_input("Despesas de Marketing (R$/m√™s)", min_value=0.0, value=8333.0, step=1000.0)
            outros_custos_mensal = st.number_input("Outros Custos (R$/m√™s)", min_value=0.0, value=4167.0, step=1000.0)
            
            # Calcular totais anuais
            custos_vendas = custos_vendas_mensal * 12
            despesas_operacionais = despesas_operacionais_mensal * 12
            despesas_adm = despesas_adm_mensal * 12
            despesas_marketing = despesas_marketing_mensal * 12
            outros_custos = outros_custos_mensal * 12
            
            # Calcular total das despesas detalhadas
            despesas_totais = custos_vendas + despesas_operacionais + despesas_adm + despesas_marketing + outros_custos
            despesas_totais_mensal = despesas_totais / 12
            st.markdown(f"**Total das Despesas: R$ {formatar_numero_br(despesas_totais_mensal)}/m√™s (R$ {formatar_numero_br(despesas_totais)}/ano)**")
        else:
            # Campo simples para despesas totais mensais (s√≥ aparece se n√£o detalhar)
            despesas_totais_mensal = st.number_input("Despesas Totais (R$/m√™s)", min_value=0.0, value=66667.0, step=1000.0, 
                                                   help="Soma de todas as despesas mensais da empresa (custos, marketing, administrativo, etc.)")
            
            # Calcular total anual
            despesas_totais = despesas_totais_mensal * 12
            
            # Se n√£o detalhou, usar valores padr√£o proporcionais
            custos_vendas = despesas_totais * 0.375  # 37.5%
            despesas_operacionais = despesas_totais * 0.25   # 25%
            despesas_adm = despesas_totais * 0.1875  # 18.75%
            despesas_marketing = despesas_totais * 0.125  # 12.5%
            outros_custos = despesas_totais * 0.0625  # 6.25%
        
        ebitda = receita_anual - despesas_totais
        ebitda = max(ebitda, 0)  # N√£o pode ser negativo
        
        # Lucro l√≠quido ser√° estimado baseado no EBITDA (assumindo 70% do EBITDA)
        lucro_liquido = ebitda * 0.7 if ebitda > 0 else 0
        st.markdown(f"**Lucro L√≠quido Estimado: R$ {formatar_numero_br(lucro_liquido)}** (70% do EBITDA)")
    
    with col2:
        # Crescimento baseado no setor e est√°gio (estimativa autom√°tica)
        n_vendedores = st.number_input("N√∫mero de Vendedores", min_value=0, value=5, step=1)
        
        # Estimativa de crescimento baseada no setor e est√°gio
        if setor == "SaaS" and tamanho_empresa == "startup":
            crescimento_estimado = 50
        elif setor == "SaaS" and tamanho_empresa == "scaleup":
            crescimento_estimado = 30
        elif setor == "SaaS" and tamanho_empresa == "estabelecida":
            crescimento_estimado = 15
        elif setor == "Consultoria" and tamanho_empresa == "startup":
            crescimento_estimado = 40
        elif setor == "Consultoria" and tamanho_empresa == "scaleup":
            crescimento_estimado = 25
        elif setor == "Consultoria" and tamanho_empresa == "estabelecida":
            crescimento_estimado = 10
        else:
            crescimento_estimado = 20
        
        st.markdown(f"**Crescimento Estimado: {crescimento_estimado}%** (baseado no setor e est√°gio)")
        crescimento_anual = crescimento_estimado / 100
        
        # M√©tricas qualitativas para Berkus e Scorecard
        produto_lancado = st.checkbox("Produto Lan√ßado", value=True)
        parcerias_estrategicas = st.checkbox("Parcerias Estrat√©gicas", value=False)
        vendas_organicas = st.checkbox("Vendas Org√¢nicas", value=True)
        investe_trafego_pago = st.checkbox("J√° investe em tr√°fego pago?", value=True)
    
    # Fatores para Scorecard
    st.markdown("### üéØ Fatores Qualitativos (Scorecard)")
    st.markdown("Selecione o n√≠vel de cada fator:")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        equipe_score = st.selectbox("For√ßa da Equipe", ["Baixo", "M√©dio", "Alto"], index=1)
        tamanho_mercado = st.selectbox("Tamanho da Oportunidade", ["Baixo", "M√©dio", "Alto"], index=1)
        produto_score = st.selectbox("Qualidade do Produto", ["Baixo", "M√©dio", "Alto"], index=1)
    
    with col2:
        vendas_marketing = st.selectbox("Estrat√©gia de Vendas/Marketing", ["Baixo", "M√©dio", "Alto"], index=1)
        financas = st.selectbox("Sa√∫de Financeira", ["Baixo", "M√©dio", "Alto"], index=1)
        competicao = st.selectbox("Competi√ß√£o", ["Baixo", "M√©dio", "Alto"], index=1)
    
    with col3:
        timing = st.selectbox("Timing de Mercado", ["Baixo", "M√©dio", "Alto"], index=1)
        inovacao = st.selectbox("Inova√ß√£o", ["Baixo", "M√©dio", "Alto"], index=1)
        channels = st.selectbox("Canais de Distribui√ß√£o", ["Baixo", "M√©dio", "Alto"], index=1)
    
    # Bot√£o para calcular
    if st.button("üí∞ Calcular Valuation", type="primary"):
        
        # Converter valores do scorecard para n√∫meros
        def converter_score(valor):
            if valor == "Baixo": return 0.7
            elif valor == "M√©dio": return 1.0
            else: return 1.3  # Alto
        
        # Calcular margem EBITDA
        margem_ebitda = ebitda / receita_anual if receita_anual > 0 else 0
        
        # Preparar dados da empresa
        dados_empresa = {
            "nome_empresa": nome_empresa,
            "setor": setor,
            "tamanho_empresa": tamanho_empresa,
            "receita_anual": receita_anual,
            "ebitda": ebitda,
            "lucro_liquido": lucro_liquido,
            "margem_ebitda": margem_ebitda,
            "crescimento_anual": crescimento_anual,
            "n_vendedores": n_vendedores,
            "produto_lancado": produto_lancado,
            "parcerias_estrategicas": parcerias_estrategicas,
            "vendas_organicas": vendas_organicas,
            "investe_trafego_pago": investe_trafego_pago,
            "equipe": converter_score(equipe_score),
            "tamanho_mercado": converter_score(tamanho_mercado),
            "produto": converter_score(produto_score),
            "vendas_marketing": converter_score(vendas_marketing),
            "financas": converter_score(financas),
            "competicao": converter_score(competicao),
            "timing": converter_score(timing),
            "inovacao": converter_score(inovacao),
            "channels": converter_score(channels)
        }
        
        # Gerar relat√≥rio completo
        relatorio = valuation_service.gerar_relatorio_completo(dados_empresa)
        resultados = relatorio["resultados"]
        
        # Exibir resultados
        st.markdown("### üìä Resultados do Valuation")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("M√∫ltiplos", f"R$ {formatar_numero_br(resultados['multiplos']['receita']/1000000, 1)}M")
        with col2:
            st.metric("DCF", f"R$ {formatar_numero_br(resultados['dcf']['valor_empresa']/1000000, 1)}M")
        with col3:
            st.metric("Berkus", f"R$ {formatar_numero_br(resultados['berkus']['valor_total']/1000000, 1)}M")
        with col4:
            st.metric("Scorecard", f"R$ {formatar_numero_br(resultados['scorecard']['valor_total']/1000000, 1)}M")
        
        # Mostrar EBITDA e margem calculados
        st.markdown("### üìä M√©tricas Financeiras Calculadas")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("EBITDA", f"R$ {formatar_numero_br(ebitda)}")
        with col2:
            st.metric("Margem EBITDA", f"{margem_ebitda*100:.1f}%")
        
        st.markdown(f"### üéØ Valuation M√©dio Ponderado: **R$ {formatar_numero_br(relatorio['valuation_medio']/1000000, 1)}M**")
        
        # Explica√ß√£o dos m√©todos
        st.markdown("### üìö Como Cada M√©todo Funciona")
        
        with st.expander("üî¢ M√©todo dos M√∫ltiplos"):
            st.markdown("""
            **Como funciona:** Compara sua empresa com outras similares do mercado usando m√∫ltiplos de receita, EBITDA e lucro.
            
            **F√≥rmula:** Valor = M√©trica Financeira √ó M√∫ltiplo de Mercado
            
            **Vantagens:** 
            - Baseado em dados reais do mercado
            - F√°cil de entender e explicar
            - Reflete o que investidores pagam por empresas similares
            
            **Limita√ß√µes:**
            - Depende de empresas compar√°veis
            - N√£o considera crescimento futuro
            - Pode ser afetado por condi√ß√µes de mercado
            """)
        
        with st.expander("üí∞ M√©todo DCF (Discounted Cash Flow)"):
            st.markdown("""
            **Como funciona:** Calcula o valor presente dos fluxos de caixa futuros da empresa.
            
            **F√≥rmula:** Valor = Œ£(Fluxo de Caixa Futuro / (1 + Taxa de Desconto)^ano) + Valor Terminal
            
            **Vantagens:**
            - Considera crescimento futuro
            - Baseado em fundamentos da empresa
            - Mais preciso para empresas com proje√ß√µes claras
            
            **Limita√ß√µes:**
            - Requer estimativas de crescimento
            - Sens√≠vel √† taxa de desconto
            - Dif√≠cil de projetar para startups
            """)
        
        with st.expander("üöÄ M√©todo Berkus"):
            st.markdown("""
            **Como funciona:** Avalia startups em est√°gio inicial baseado em marcos qualitativos.
            
            **Crit√©rios avaliados:**
            - Produto lan√ßado: R$ 500k
            - Vendas org√¢nicas: R$ 500k
            - Parcerias estrat√©gicas: R$ 500k
            - Investimento em tr√°fego pago: R$ 500k
            
            **Vantagens:**
            - Ideal para startups em est√°gio inicial
            - F√°cil de aplicar
            - Considera marcos importantes
            
            **Limita√ß√µes:**
            - Limitado a startups
            - N√£o considera receita atual
            - Valores fixos podem n√£o refletir realidade
            """)
        
        with st.expander("üìä M√©todo Scorecard"):
            st.markdown("""
            **Como funciona:** Avalia qualitativamente diferentes aspectos da empresa e aplica multiplicadores.
            
            **Fatores avaliados:**
            - For√ßa da equipe
            - Tamanho da oportunidade
            - Qualidade do produto
            - Estrat√©gia de vendas/marketing
            - Sa√∫de financeira
            - Competi√ß√£o
            - Timing de mercado
            - Inova√ß√£o
            - Canais de distribui√ß√£o
            
            **Vantagens:**
            - Considera aspectos qualitativos
            - Flex√≠vel para diferentes tipos de empresa
            - Abrangente
            
            **Limita√ß√µes:**
            - Subjetivo
            - Requer conhecimento do avaliador
            - Pode ser inconsistente
            """)
        
        # Detalhamento dos m√©todos
        st.markdown("### üìà Detalhamento por M√©todo")
        
        # M√∫ltiplos
        st.markdown("#### üî¢ Valuation por M√∫ltiplos")
        mult_df = pd.DataFrame({
            "M√©todo": ["Receita", "EBITDA", "Lucro L√≠quido"],
            "M√∫ltiplo": [
                resultados['multiplos']['multiplos']['receita'],
                resultados['multiplos']['multiplos']['ebitda'],
                resultados['multiplos']['multiplos']['lucro']
            ],
            "Valor Base (R$)": [receita_anual, ebitda, lucro_liquido],
            "Valuation (R$)": [
                resultados['multiplos']['receita'],
                resultados['multiplos']['ebitda'],
                resultados['multiplos']['lucro']
            ]
        })
        st.dataframe(formatar_dataframe_br(mult_df), hide_index=True)
        
        # Mostrar multiplicadores utilizados
        st.markdown("**Multiplicadores Utilizados:**")
        mult = resultados['multiplos']['multiplos']
        st.markdown(f"- **Receita**: {mult['receita']}x")
        st.markdown(f"- **EBITDA**: {mult['ebitda']}x")
        st.markdown(f"- **Lucro L√≠quido**: {mult['lucro']}x")
        st.markdown(f"- **Setor**: {setor}")
        st.markdown(f"- **Est√°gio**: {tamanho_empresa}")
        
        # DCF
        st.markdown("#### üí∞ Valuation por DCF")
        dcf_df = pd.DataFrame({
            "Ano": range(1, len(resultados['dcf']['receitas_projetadas']) + 1),
            "Receita Projetada (R$)": resultados['dcf']['receitas_projetadas'],
            "EBITDA Projetado (R$)": resultados['dcf']['ebitda_projetado'],
            "FCF Projetado (R$)": resultados['dcf']['fcf_projetado'],
            "VP FCF (R$)": resultados['dcf']['vp_fcf']
        })
        st.dataframe(formatar_dataframe_br(dcf_df), hide_index=True)
        
        st.markdown(f"**Valor Terminal:** R$ {formatar_numero_br(resultados['dcf']['valor_terminal'])}")
        st.markdown(f"**VP Valor Terminal:** R$ {formatar_numero_br(resultados['dcf']['vp_terminal'])}")
        
        # Berkus
        st.markdown("#### üöÄ Valuation por Berkus")
        berkus_fatores = []
        for fator in resultados['berkus']['fatores']:
            berkus_fatores.append([fator['fator'], f"R$ {formatar_numero_br(fator['valor'])}"])
        
        berkus_df = pd.DataFrame(berkus_fatores, columns=["Fator", "Valor"])
        st.dataframe(berkus_df, hide_index=True)
        
        # Scorecard
        st.markdown("#### üìä Valuation por Scorecard")
        scorecard_fatores = []
        for fator, valor in resultados['scorecard']['fatores'].items():
            # Converter valor num√©rico para texto
            if valor == 0.7:
                valor_texto = "Baixo"
            elif valor == 1.0:
                valor_texto = "M√©dio"
            else:
                valor_texto = "Alto"
            scorecard_fatores.append([fator, valor_texto])
        
        scorecard_df = pd.DataFrame(scorecard_fatores, columns=["Fator", "N√≠vel"])
        st.dataframe(scorecard_df, hide_index=True)
        
        # Resumo final
        st.markdown("### üìã Resumo Executivo")
        
        resumo_df = valuation_service.exportar_para_dataframe(relatorio)
        resumo_df = resumo_df[["M√©todo", "Valuation (R$ M)", "Peso"]]
        
        st.dataframe(formatar_dataframe_br(resumo_df), hide_index=True)
        
        # Bot√µes de exporta√ß√£o
        st.markdown("### üì§ Exportar Resultados")
        exibir_botoes_exportacao(resumo_df, f"valuation_{nome_empresa.replace(' ', '_')}")
        
        # Salvar na sess√£o
        st.session_state["valuation_result"] = relatorio 