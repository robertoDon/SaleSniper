import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import locale
import io
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
import xlsxwriter
from services.valuation_service import ValuationService

# Configurar locale para portugu√™s do Brasil
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_ALL, '')

def formatar_numero_br(valor, casas_decimais=0):
    """Formata n√∫mero para o padr√£o brasileiro."""
    if isinstance(valor, (int, float)):
        if isinstance(valor, int) or (isinstance(valor, float) and (valor.is_integer() or abs(valor - round(valor)) < 0.001)):
            return f"{int(round(valor)):,}".replace(",", ".")
        return f"{valor:,.{casas_decimais}f}".replace(",", "X").replace(".", ",").replace("X", ".")
    return valor

def formatar_dataframe_br(df):
    """Formata todos os n√∫meros de um DataFrame para o padr√£o brasileiro."""
    df_formatado = df.copy()
    for coluna in df_formatado.columns:
        if pd.api.types.is_numeric_dtype(df_formatado[coluna]):
            df_formatado[coluna] = df_formatado[coluna].apply(lambda x: formatar_numero_br(x))
    return df_formatado

def exportar_para_xlsx(df: pd.DataFrame, nome_arquivo: str):
    """Exporta um DataFrame para arquivo XLSX."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    return output.getvalue()

def exportar_para_pdf(df: pd.DataFrame, nome_arquivo: str):
    """Exporta um DataFrame para arquivo PDF."""
    output = io.BytesIO()
    doc = SimpleDocTemplate(output, pagesize=letter)
    elements = []
    
    data = [df.columns.tolist()] + df.values.tolist()
    table = Table(data)
    
    style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    table.setStyle(style)
    
    elements.append(table)
    doc.build(elements)
    return output.getvalue()

def exibir_botoes_exportacao(df: pd.DataFrame, nome_arquivo: str):
    """Exibe bot√µes para exportar DataFrame em diferentes formatos."""
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.download_button(
            label="üì• CSV",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name=f"{nome_arquivo}.csv",
            mime='text/csv'
        )
    
    with col2:
        st.download_button(
            label="üì• XLSX",
            data=exportar_para_xlsx(df, nome_arquivo),
            file_name=f"{nome_arquivo}.xlsx",
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
    with col3:
        st.download_button(
            label="üì• PDF",
            data=exportar_para_pdf(df, nome_arquivo),
            file_name=f"{nome_arquivo}.pdf",
            mime='application/pdf'
        )

def exibir_valuation():
    # Verificar se √© a primeira execu√ß√£o
    if "valuation_initialized" not in st.session_state:
        st.session_state["valuation_initialized"] = True
        st.session_state["valuation_result"] = None
    
    st.markdown("<h1 style='color: #FF8C00;'>SaleSniper - Valuation de Empresas</h1>", unsafe_allow_html=True)
    
    st.markdown("""
    ### üìä Calculadora de Valuation Empresarial
    
    Esta ferramenta utiliza os m√©todos mais estabelecidos do mercado para calcular o valuation de sua empresa:
    
    - **M√∫ltiplos de Mercado**: Compara√ß√£o com empresas similares
    - **DCF (Discounted Cash Flow)**: Valor presente dos fluxos futuros
    - **M√©todo Berkus**: Para empresas em est√°gio inicial
    - **Scorecard**: Avalia√ß√£o qualitativa e quantitativa
    """)
    
    # Inicializar servi√ßo de valuation
    valuation_service = ValuationService()
    
    # Formul√°rio de dados da empresa
    st.markdown("### üìã Dados da Empresa")
    
    col1, col2 = st.columns(2)
    
    with col1:
        nome_empresa = st.text_input("Nome da Empresa", value="Minha Empresa")
        setor = st.selectbox("Setor", [
            "SaaS", "Tecnologia", "E-commerce", "Consultoria", "Varejo", "Servi√ßos", "Outros"
        ])
        
        # Est√°gios da empresa com explica√ß√µes
        estagios_info = {
            "ideacao": "Desenvolvendo ideia e conceito do produto/servi√ßo",
            "validacao": "Validando mercado e primeiros clientes",
            "operacao": "Opera√ß√£o est√°vel com receita recorrente",
            "tracao": "Crescimento acelerado e valida√ß√£o de mercado",
            "escala": "Expans√£o e otimiza√ß√£o de opera√ß√µes"
        }
        
        tamanho_empresa = st.selectbox("Est√°gio da Empresa", list(estagios_info.keys()))
        
        # Exibir explica√ß√£o do est√°gio
        st.caption(f"üí° {estagios_info[tamanho_empresa]}")
        
        receita_anual = st.number_input("Faturamento Anual (R$)", min_value=0.0, value=1000000.0, step=10000.0, 
                                       help="Ex: 1.000.000 para R$ 1 milh√£o - Valor total faturado no ano")
        st.caption(f"Valor atual: R$ {formatar_numero_br(receita_anual)}")
        
        n_vendedores = st.number_input("N√∫mero de Vendedores", min_value=0, value=5, step=1)
        
        # M√©tricas qualitativas para Berkus e Scorecard
        produto_lancado = st.checkbox("Produto Lan√ßado", value=True)
        parcerias_estrategicas = st.checkbox("Parcerias Estrat√©gicas", value=False)
        vendas_organicas = st.checkbox("Vendas Org√¢nicas", value=True)
        investe_trafego_pago = st.checkbox("Invisto em tr√°fego pago", value=True)
    
    with col2:
        # Estimativa de crescimento baseada no setor e est√°gio
        if setor == "SaaS" and tamanho_empresa == "ideacao":
            crescimento_estimado = 100
        elif setor == "SaaS" and tamanho_empresa == "validacao":
            crescimento_estimado = 80
        elif setor == "SaaS" and tamanho_empresa == "operacao":
            crescimento_estimado = 50
        elif setor == "SaaS" and tamanho_empresa == "tracao":
            crescimento_estimado = 30
        elif setor == "SaaS" and tamanho_empresa == "escala":
            crescimento_estimado = 15
        elif setor == "Consultoria" and tamanho_empresa == "ideacao":
            crescimento_estimado = 80
        elif setor == "Consultoria" and tamanho_empresa == "validacao":
            crescimento_estimado = 60
        elif setor == "Consultoria" and tamanho_empresa == "operacao":
            crescimento_estimado = 40
        elif setor == "Consultoria" and tamanho_empresa == "tracao":
            crescimento_estimado = 25
        elif setor == "Consultoria" and tamanho_empresa == "escala":
            crescimento_estimado = 10
        else:
            crescimento_estimado = 30
        
        st.markdown(f"**Crescimento Estimado: {crescimento_estimado}%** (baseado no setor e est√°gio)")
        crescimento_anual = crescimento_estimado / 100
        
        # Op√ß√£o para detalhar despesas - MOVIDA PARA BAIXO
        detalhar_despesas = st.checkbox("üîç Detalhar Despesas (Opcional)")
        
        if detalhar_despesas:
            st.markdown("**Detalhe suas despesas mensais por categoria:**")
            custos_vendas_mensal = st.number_input("Custos de Vendas (R$/m√™s)", min_value=0.0, value=25000.0, step=1000.0, 
                                                  help="Ex: 25.000")
            st.caption(f"Valor atual: R$ {formatar_numero_br(custos_vendas_mensal)}/m√™s")
            
            despesas_operacionais_mensal = st.number_input("Despesas Operacionais (R$/m√™s)", min_value=0.0, value=16667.0, step=1000.0, 
                                                          help="Ex: 16.667")
            st.caption(f"Valor atual: R$ {formatar_numero_br(despesas_operacionais_mensal)}/m√™s")
            
            despesas_adm_mensal = st.number_input("Despesas Administrativas (R$/m√™s)", min_value=0.0, value=12500.0, step=1000.0, 
                                                 help="Ex: 12.500")
            st.caption(f"Valor atual: R$ {formatar_numero_br(despesas_adm_mensal)}/m√™s")
            
            despesas_marketing_mensal = st.number_input("Despesas de Marketing (R$/m√™s)", min_value=0.0, value=8333.0, step=1000.0, 
                                                       help="Ex: 8.333")
            st.caption(f"Valor atual: R$ {formatar_numero_br(despesas_marketing_mensal)}/m√™s")
            
            outros_custos_mensal = st.number_input("Outros Custos (R$/m√™s)", min_value=0.0, value=4167.0, step=1000.0, 
                                                  help="Ex: 4.167")
            st.caption(f"Valor atual: R$ {formatar_numero_br(outros_custos_mensal)}/m√™s")
            
            # Calcular totais anuais
            custos_vendas = custos_vendas_mensal * 12
            despesas_operacionais = despesas_operacionais_mensal * 12
            despesas_adm = despesas_adm_mensal * 12
            despesas_marketing = despesas_marketing_mensal * 12
            outros_custos = outros_custos_mensal * 12
            
            # Calcular total das despesas detalhadas
            despesas_totais = custos_vendas + despesas_operacionais + despesas_adm + despesas_marketing + outros_custos
            despesas_totais_mensal = despesas_totais / 12
            st.markdown(f"**Total das Despesas: R$ {formatar_numero_br(despesas_totais_mensal)}/m√™s (R$ {formatar_numero_br(despesas_totais)}/ano)**")
        else:
            # Campo simples para despesas totais mensais (s√≥ aparece se n√£o detalhar)
            despesas_totais_mensal = st.number_input("Despesas Totais (R$/m√™s)", min_value=0.0, value=66667.0, step=1000.0, 
                                                   help="Ex: 66.667 - Soma de todas as despesas mensais")
            st.caption(f"Valor atual: R$ {formatar_numero_br(despesas_totais_mensal)}/m√™s")
            
            # Calcular total anual
            despesas_totais = despesas_totais_mensal * 12
            
            # Se n√£o detalhou, usar valores padr√£o proporcionais
            custos_vendas = despesas_totais * 0.375  # 37.5%
            despesas_operacionais = despesas_totais * 0.25   # 25%
            despesas_adm = despesas_totais * 0.1875  # 18.75%
            despesas_marketing = despesas_totais * 0.125  # 12.5%
            outros_custos = despesas_totais * 0.0625  # 6.25%
        
        ebitda = receita_anual - despesas_totais
        ebitda = max(ebitda, 0)  # N√£o pode ser negativo
        
        # Lucro l√≠quido ser√° estimado baseado no EBITDA (assumindo 70% do EBITDA)
        lucro_liquido = ebitda * 0.7 if ebitda > 0 else 0
        st.markdown(f"**Lucro L√≠quido Estimado: R$ {formatar_numero_br(lucro_liquido)}** (70% do EBITDA)")
    
    # Fatores para Scorecard - 3 COLUNAS
    st.markdown("### üéØ Fatores Qualitativos (Scorecard)")
    st.markdown("Selecione o n√≠vel de cada fator:")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.caption("**For√ßa da Equipe**: Baixo = Equipe pequena/iniciante | M√©dio = Equipe experiente | Alto = Equipe especializada/executiva")
        equipe_score = st.selectbox("For√ßa da Equipe", ["Baixo", "M√©dio", "Alto"], index=1)
        
        st.caption("**Qualidade do Produto**: Baixo = MVP b√°sico | M√©dio = Produto funcional | Alto = Produto diferenciado/premium")
        produto_score = st.selectbox("Qualidade do Produto", ["Baixo", "M√©dio", "Alto"], index=1)
        
        st.caption("**Estrat√©gia de Vendas/Marketing**: Baixo = Sem estrat√©gia definida | M√©dio = Estrat√©gia b√°sica | Alto = Estrat√©gia sofisticada")
        vendas_marketing = st.selectbox("Estrat√©gia de Vendas/Marketing", ["Baixo", "M√©dio", "Alto"], index=1)
    
    with col2:
        st.caption("**Sa√∫de Financeira**: Baixo = Preju√≠zo/endividado | M√©dio = Equilibrado | Alto = Lucrativo/capital pr√≥prio")
        financas = st.selectbox("Sa√∫de Financeira", ["Baixo", "M√©dio", "Alto"], index=1)
        
        st.caption("**Concorr√™ncia**: Baixo = Muitos concorrentes | M√©dio = Concorr√™ncia moderada | Alto = Poucos concorrentes")
        concorrencia = st.selectbox("Concorr√™ncia", ["Baixo", "M√©dio", "Alto"], index=1)
        
        st.caption("**Inova√ß√£o**: Baixo = Produto comum | M√©dio = Alguma diferencia√ß√£o | Alto = Tecnologia √∫nica/patente")
        inovacao = st.selectbox("Inova√ß√£o", ["Baixo", "M√©dio", "Alto"], index=1)
    
    # Verificar se j√° temos resultados calculados
    if "valuation_result" in st.session_state and st.session_state["valuation_result"] is not None:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.success("‚úÖ Valuation j√° calculado! Os resultados est√£o sendo exibidos abaixo.")
        with col2:
            if st.button("üîÑ Novo C√°lculo", type="secondary"):
                st.session_state["valuation_result"] = None
                st.rerun()
        
        # Usar resultados salvos
        relatorio = st.session_state["valuation_result"]
        resultados = relatorio["resultados"]
        
        # Recuperar dados do formul√°rio da sess√£o
        dados_empresa = relatorio["dados_empresa"]
        nome_empresa = dados_empresa["nome_empresa"]
        setor = dados_empresa["setor"]
        tamanho_empresa = dados_empresa["tamanho_empresa"]
        receita_anual = dados_empresa["receita_anual"]
        ebitda = dados_empresa["ebitda"]
        lucro_liquido = dados_empresa["lucro_liquido"]
        margem_ebitda = dados_empresa["margem_ebitda"]
        crescimento_anual = dados_empresa["crescimento_anual"]
        n_vendedores = dados_empresa["n_vendedores"]
        produto_lancado = dados_empresa["produto_lancado"]
        parcerias_estrategicas = dados_empresa["parcerias_estrategicas"]
        vendas_organicas = dados_empresa["vendas_organicas"]
        investe_trafego_pago = dados_empresa["investe_trafego_pago"]
        
        # Recuperar scores
        def converter_score_reverso(valor):
            if valor == 0.7: return "Baixo"
            elif valor == 1.0: return "M√©dio"
            else: return "Alto"  # 1.3
        
        equipe_score = converter_score_reverso(dados_empresa["equipe"])
        produto_score = converter_score_reverso(dados_empresa["produto"])
        vendas_marketing = converter_score_reverso(dados_empresa["vendas_marketing"])
        financas = converter_score_reverso(dados_empresa["financas"])
        concorrencia = converter_score_reverso(dados_empresa["concorrencia"])
        inovacao = converter_score_reverso(dados_empresa["inovacao"])
        
        # Calcular crescimento estimado para exibi√ß√£o
        if setor == "SaaS" and tamanho_empresa == "ideacao":
            crescimento_estimado = 100
        elif setor == "SaaS" and tamanho_empresa == "validacao":
            crescimento_estimado = 80
        elif setor == "SaaS" and tamanho_empresa == "operacao":
            crescimento_estimado = 50
        elif setor == "SaaS" and tamanho_empresa == "tracao":
            crescimento_estimado = 30
        elif setor == "SaaS" and tamanho_empresa == "escala":
            crescimento_estimado = 15
        elif setor == "Consultoria" and tamanho_empresa == "ideacao":
            crescimento_estimado = 80
        elif setor == "Consultoria" and tamanho_empresa == "validacao":
            crescimento_estimado = 60
        elif setor == "Consultoria" and tamanho_empresa == "operacao":
            crescimento_estimado = 40
        elif setor == "Consultoria" and tamanho_empresa == "tracao":
            crescimento_estimado = 25
        elif setor == "Consultoria" and tamanho_empresa == "escala":
            crescimento_estimado = 10
        else:
            crescimento_estimado = 30
    
    # Bot√£o para calcular
    if st.button("üí∞ Calcular Valuation", type="primary"):
        
        # Converter valores do scorecard para n√∫meros
        def converter_score(valor):
            if valor == "Baixo": return 0.7
            elif valor == "M√©dio": return 1.0
            else: return 1.3  # Alto
        
        # Calcular margem EBITDA
        margem_ebitda = ebitda / receita_anual if receita_anual > 0 else 0
        
        # Preparar dados da empresa
        dados_empresa = {
            "nome_empresa": nome_empresa,
            "setor": setor,
            "tamanho_empresa": tamanho_empresa,
            "receita_anual": receita_anual,
            "ebitda": ebitda,
            "lucro_liquido": lucro_liquido,
            "margem_ebitda": margem_ebitda,
            "crescimento_anual": crescimento_anual,
            "n_vendedores": n_vendedores,
            "produto_lancado": produto_lancado,
            "parcerias_estrategicas": parcerias_estrategicas,
            "vendas_organicas": vendas_organicas,
            "investe_trafego_pago": investe_trafego_pago,
            "equipe": converter_score(equipe_score),
            "produto": converter_score(produto_score),
            "vendas_marketing": converter_score(vendas_marketing),
            "financas": converter_score(financas),
            "concorrencia": converter_score(concorrencia),
            "inovacao": converter_score(inovacao)
        }
        
        # Gerar relat√≥rio completo
        relatorio = valuation_service.gerar_relatorio_completo(dados_empresa)
        resultados = relatorio["resultados"]
        
        # Salvar na sess√£o
        st.session_state["valuation_result"] = relatorio
        st.success("‚úÖ Valuation calculado com sucesso!")
        
        # Exibir resultados ap√≥s o c√°lculo
        st.markdown("### üìä Resultados do Valuation")
        
        # APENAS M√öLTIPLOS - Simplificado
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("M√∫ltiplos", f"R$ {formatar_numero_br(resultados['multiplos']['receita']/1000000, 1)}M")
            with st.expander("‚ùì O que √© valuation por m√∫ltiplos?", expanded=False):
                st.markdown("""
                **üî¢ M√©todo dos M√∫ltiplos**
                
                **Como funciona:** Compara sua empresa com outras similares do mercado usando m√∫ltiplos de faturamento, EBITDA e lucro.
                
                **F√≥rmula:** Valor = M√©trica Financeira √ó M√∫ltiplo de Mercado
                
                **Por que este valor:** Baseado em m√∫ltiplos reais do mercado para empresas do setor {setor} em est√°gio {tamanho_empresa}.
                
                **Vantagens:** 
                - Baseado em dados reais do mercado
                - F√°cil de entender e explicar
                - Reflete o que investidores pagam por empresas similares
                """)
        
        with col2:
            st.metric("DCF", f"R$ {formatar_numero_br(resultados['dcf']['valor_empresa']/1000000, 1)}M")
            st.caption("Ver relat√≥rio completo")
        
        with col3:
            st.metric("Berkus", f"R$ {formatar_numero_br(resultados['berkus']['valor_total']/1000000, 1)}M")
            st.caption("Ver relat√≥rio completo")
        
        with col4:
            st.metric("Scorecard", f"R$ {formatar_numero_br(resultados['scorecard']['valor_total']/1000000, 1)}M")
            st.caption("Ver relat√≥rio completo")
        
        # M√©tricas Financeiras - MANTER COMO EST√Å
        st.markdown("### üìä M√©tricas Financeiras Calculadas")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("EBITDA", f"R$ {formatar_numero_br(ebitda)}")
        with col2:
            st.metric("Margem EBITDA", f"{margem_ebitda*100:.1f}%")
        
        # Multiplicadores Utilizados - MANTER COMO EST√Å
        st.markdown("### üìà Multiplicadores Utilizados")
        mult = resultados['multiplos']['multiplos']
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Faturamento", f"{mult['receita']}x")
        with col2:
            st.metric("EBITDA", f"{mult['ebitda']}x")
        with col3:
            st.metric("Lucro L√≠quido", f"{mult['lucro']}x")
        
        st.caption(f"Baseado em empresas do setor {setor} em est√°gio {tamanho_empresa}")
        
        # An√°lise e recomenda√ß√£o - SEM EMOJIS
        st.markdown("### E a√≠, estou bem?")
        
        # Calcular m√©tricas para an√°lise
        valuation_medio = relatorio['valuation_medio']
        margem_ebitda = ebitda / receita_anual if receita_anual > 0 else 0
        
        # Determinar se est√° bem para o mercado
        if tamanho_empresa == "ideacao":
            if valuation_medio >= 2000000:  # R$ 2M
                status = "Muito bem posicionada!"
                analise = "Sua empresa est√° com um valuation excelente para o est√°gio de idea√ß√£o. Isso indica que voc√™ tem uma base s√≥lida e potencial de crescimento significativo."
            elif valuation_medio >= 1000000:  # R$ 1M
                status = "Bem posicionada"
                analise = "Sua empresa est√° bem posicionada no mercado. H√° espa√ßo para crescimento, mas a base est√° s√≥lida."
            else:
                status = "Precisa de melhorias"
                analise = "Sua empresa precisa de melhorias para se destacar no mercado. Foque em validar o produto e gerar receita."
        elif tamanho_empresa == "validacao":
            if valuation_medio >= 5000000:  # R$ 5M
                status = "Excelente posicionamento!"
                analise = "Sua empresa est√° com um valuation muito forte para o est√°gio de valida√ß√£o. Voc√™ tem um produto validado e crescimento consistente."
            elif valuation_medio >= 2500000:  # R$ 2.5M
                status = "Bem posicionada"
                analise = "Sua empresa est√° bem posicionada. Continue focando na valida√ß√£o de mercado."
            else:
                status = "Precisa de melhorias"
                analise = "Sua empresa precisa de melhorias para se destacar. Foque em valida√ß√£o de mercado e primeiros clientes."
        elif tamanho_empresa == "operacao":
            if valuation_medio >= 15000000:  # R$ 15M
                status = "Posicionamento excepcional!"
                analise = "Sua empresa est√° com um valuation excepcional para o est√°gio de opera√ß√£o. Voc√™ tem um modelo de neg√≥cio validado e opera√ß√£o est√°vel."
            elif valuation_medio >= 7500000:  # R$ 7.5M
                status = "Bem posicionada"
                analise = "Sua empresa est√° bem posicionada. Continue focando na otimiza√ß√£o da opera√ß√£o."
            else:
                status = "Precisa de melhorias"
                analise = "Sua empresa precisa de melhorias para se destacar. Foque em estabilizar a opera√ß√£o e aumentar receita."
        elif tamanho_empresa == "tracao":
            if valuation_medio >= 50000000:  # R$ 50M
                status = "Posicionamento excepcional!"
                analise = "Sua empresa est√° com um valuation excepcional para o est√°gio de tra√ß√£o. Voc√™ tem crescimento acelerado e valida√ß√£o de mercado."
            elif valuation_medio >= 25000000:  # R$ 25M
                status = "Bem posicionada"
                analise = "Sua empresa est√° bem posicionada. Continue focando no crescimento acelerado."
            else:
                status = "Precisa de melhorias"
                analise = "Sua empresa precisa de melhorias para se destacar. Foque em crescimento acelerado e valida√ß√£o."
        else:  # escala
            if valuation_medio >= 100000000:  # R$ 100M
                status = "Posicionamento s√≥lido!"
                analise = "Sua empresa em escala est√° com um valuation muito s√≥lido. Voc√™ tem um neg√≥cio maduro e lucrativo."
            elif valuation_medio >= 50000000:  # R$ 50M
                status = "Bem posicionada"
                analise = "Sua empresa est√° bem posicionada. Continue focando na otimiza√ß√£o e expans√£o."
            else:
                status = "Precisa de melhorias"
                analise = "Sua empresa precisa de melhorias para se destacar. Foque em efici√™ncia e crescimento sustent√°vel."
        
        # An√°lise espec√≠fica baseada nos dados do formul√°rio
        pontos_positivos = []
        pontos_alerta = []
        pontos_negativos = []
        
        # Pontos positivos baseados nos dados
        if produto_lancado:
            pontos_positivos.append("**Produto j√° lan√ßado**: Voc√™ tem um produto validado no mercado")
        if vendas_organicas:
            pontos_positivos.append("**Vendas org√¢nicas**: Voc√™ consegue gerar vendas sem investimento pesado")
        if parcerias_estrategicas:
            pontos_positivos.append("**Parcerias estrat√©gicas**: Voc√™ tem alian√ßas importantes no mercado")
        if investe_trafego_pago:
            pontos_positivos.append("**Investe em tr√°fego pago**: Voc√™ tem estrat√©gia de aquisi√ß√£o ativa")
        if margem_ebitda > 0.2:
            pontos_positivos.append("**Margem EBITDA alta**: Sua opera√ß√£o √© eficiente")
        if receita_anual > 5000000:
            pontos_positivos.append("**Faturamento s√≥lido**: Voc√™ tem uma base financeira forte")
        if n_vendedores > 3:
            pontos_positivos.append("**Equipe de vendas**: Voc√™ tem capacidade de expans√£o")
        
        # Pontos de alerta (meio termo)
        if margem_ebitda >= 0.1 and margem_ebitda <= 0.2:
            pontos_alerta.append("**Margem EBITDA moderada**: H√° espa√ßo para otimiza√ß√£o de custos")
        if receita_anual >= 1000000 and receita_anual <= 5000000:
            pontos_alerta.append("**Faturamento em crescimento**: Continue focando na expans√£o")
        if n_vendedores >= 2 and n_vendedores <= 3:
            pontos_alerta.append("**Equipe de vendas pequena**: Considere expandir para acelerar crescimento")
        
        # Pontos negativos espec√≠ficos
        if not produto_lancado and tamanho_empresa in ["ideacao", "validacao"]:
            pontos_negativos.append("**Produto n√£o lan√ßado**: Priorize o lan√ßamento para validar o mercado e aumentar o valuation")
        if not vendas_organicas and tamanho_empresa in ["ideacao", "validacao"]:
            pontos_negativos.append("**Sem vendas org√¢nicas**: Desenvolva estrat√©gias de aquisi√ß√£o natural de clientes")
        if not parcerias_estrategicas:
            pontos_negativos.append("**Sem parcerias estrat√©gicas**: Busque alian√ßas que possam acelerar seu crescimento")
        if not investe_trafego_pago:
            pontos_negativos.append("**N√£o investe em tr√°fego pago**: Considere estrat√©gias de marketing digital para crescimento")
        if margem_ebitda < 0.1:
            pontos_negativos.append(f"**Margem EBITDA baixa ({margem_ebitda*100:.1f}%)**: Otimize custos operacionais para aumentar lucratividade")
        if receita_anual < 1000000:
            pontos_negativos.append(f"**Faturamento baixo (R$ {formatar_numero_br(receita_anual)})**: Foque em crescimento de vendas e expans√£o de mercado")
        if n_vendedores < 2:
            pontos_negativos.append("**Equipe de vendas pequena**: Considere expandir a equipe para acelerar crescimento")
        
        # Garantir sempre pelo menos 1 de cada
        if not pontos_positivos:
            pontos_positivos.append("**Potencial de crescimento**: Sua empresa tem espa√ßo para evolu√ß√£o significativa")
        if not pontos_alerta:
            pontos_alerta.append("**Continue otimizando**: Mantenha o foco na melhoria cont√≠nua")
        if not pontos_negativos:
            pontos_negativos.append("**Aten√ß√£o aos detalhes**: Foque na otimiza√ß√£o de processos e efici√™ncia")
        
        # Exibir an√°lise
        st.markdown(f"**{status}**")
        st.markdown(analise)
        
        st.markdown("**Ponto Positivo:**")
        st.markdown(f"‚Ä¢ {pontos_positivos[0]}")
        
        st.markdown("**Ponto Alerta:**")
        st.markdown(f"‚Ä¢ {pontos_alerta[0]}")
        
        st.markdown("**Ponto Negativo:**")
        st.markdown(f"‚Ä¢ {pontos_negativos[0]}")
        
        # Recomenda√ß√£o de produto Don
        st.markdown("**Recomenda√ß√£o de produto Don:**")
        
        if tamanho_empresa == "ideacao":
            programa = "**Don for Idea√ß√£o**"
            descricao_programa = "Programa especializado para empresas em est√°gio de idea√ß√£o, focado em desenvolvimento de conceito e valida√ß√£o inicial."
            dica_negocio = "Foque em validar sua ideia com o mercado antes de investir pesado em desenvolvimento."
        elif tamanho_empresa == "validacao":
            programa = "**Don for Valida√ß√£o**"
            descricao_programa = "Programa para empresas em valida√ß√£o, focado em primeiros clientes e valida√ß√£o de mercado."
            dica_negocio = "Priorize encontrar seus primeiros clientes e validar o produto-market fit."
        elif tamanho_empresa == "operacao":
            programa = "**Don for Opera√ß√£o**"
            descricao_programa = "Programa para empresas em opera√ß√£o est√°vel, focado em otimiza√ß√£o e crescimento sustent√°vel."
            dica_negocio = "Foque em estabilizar processos e aumentar a efici√™ncia operacional."
        elif tamanho_empresa == "tracao":
            programa = "**Don for Tra√ß√£o**"
            descricao_programa = "Programa para empresas em tra√ß√£o, focado em crescimento acelerado e expans√£o de mercado."
            dica_negocio = "Acelere o crescimento focando em estrat√©gias de aquisi√ß√£o e expans√£o."
        else:  # escala
            programa = "**Don for Escala**"
            descricao_programa = "Programa para empresas em escala, focado em otimiza√ß√£o e expans√£o estrat√©gica."
            dica_negocio = "Otimize processos e busque expans√£o estrat√©gica para maximizar resultados."
        
        st.markdown(f"Baseado no est√°gio da sua empresa ({tamanho_empresa}), recomendamos o {programa}.")
        st.markdown(descricao_programa)
        st.markdown(f"**Dica de neg√≥cio:** {dica_negocio}")
        
        # Bot√£o de contato
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.link_button(
                "Entre em contato conosco",
                "https://api.whatsapp.com/send/?phone=554892254155&text&type=phone_number&app_absent=0",
                type="primary"
            )