import streamlit as st
import pandas as pd
from services.faixas_ticket import identificar_faixa, ajuste_por_faixa, base_taxas
from services.funil import calcular_funil, calcular_projecao
import io
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
import xlsxwriter
import locale
from datetime import datetime, timedelta
import calendar
import holidays
import numpy as np

# Configurar locale para portugu√™s do Brasil
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

# Definir etapas do funil globalmente
etapas = ["Lead", "MQL", "SAL", "Agendamento", "Reuni√£o Ocorrida", "Oportunidade (SQL)", "Venda"]

def formatar_numero_br(valor, casas_decimais=0):
    """Formata n√∫mero para o padr√£o brasileiro."""
    if isinstance(valor, (int, float)):
        # Se for um n√∫mero inteiro ou se o valor for muito pr√≥ximo de um inteiro
        if isinstance(valor, int) or (isinstance(valor, float) and (valor.is_integer() or abs(valor - round(valor)) < 0.001)):
            return f"{int(round(valor)):,}".replace(",", ".")
        return f"{valor:,.{casas_decimais}f}".replace(",", "X").replace(".", ",").replace("X", ".")
    return valor

def formatar_dataframe_br(df):
    """Formata todos os n√∫meros de um DataFrame para o padr√£o brasileiro."""
    df_formatado = df.copy()
    for coluna in df_formatado.columns:
        if pd.api.types.is_numeric_dtype(df_formatado[coluna]):
            df_formatado[coluna] = df_formatado[coluna].apply(lambda x: formatar_numero_br(x))
    return df_formatado

def exportar_para_xlsx(df: pd.DataFrame, nome_arquivo: str):
    """Exporta um DataFrame para arquivo XLSX."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    return output.getvalue()

def exportar_para_pdf(df: pd.DataFrame, nome_arquivo: str):
    """Exporta um DataFrame para arquivo PDF."""
    output = io.BytesIO()
    doc = SimpleDocTemplate(output, pagesize=letter)
    elements = []
    
    # Converter DataFrame para lista de listas
    data = [df.columns.tolist()] + df.values.tolist()
    
    # Criar tabela
    table = Table(data)
    
    # Estilizar tabela
    style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    table.setStyle(style)
    
    elements.append(table)
    doc.build(elements)
    return output.getvalue()

def exibir_botoes_exportacao(df: pd.DataFrame, nome_arquivo: str):
    """Exibe bot√µes para exportar DataFrame em diferentes formatos."""
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.download_button(
            label="üì• CSV",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name=f"{nome_arquivo}.csv",
            mime='text/csv'
        )
    
    with col2:
        st.download_button(
            label="üì• XLSX",
            data=exportar_para_xlsx(df, nome_arquivo),
            file_name=f"{nome_arquivo}.xlsx",
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
    with col3:
        st.download_button(
            label="üì• PDF",
            data=exportar_para_pdf(df, nome_arquivo),
            file_name=f"{nome_arquivo}.pdf",
            mime='application/pdf'
        )

def calcular_progressao_metas(meta_final, meses_restantes, n_vendedores_inicial):
    """Calcula a progress√£o de metas e n√∫mero de vendedores ao longo dos meses."""
    n_meses = len(meses_restantes)
    
    # Criar progress√£o exponencial suave para as metas
    # Come√ßa com 40% da meta final e termina com 100%
    progressao = np.linspace(0.4, 1.0, n_meses)
    metas_mensais = [meta_final * p for p in progressao]
    
    # Calcular n√∫mero de vendedores necess√°rios para cada m√™s
    vendedores_por_mes = []
    for i, meta in enumerate(metas_mensais):
        # Come√ßa com o n√∫mero inicial de vendedores
        if i == 0:
            vendedores_por_mes.append(n_vendedores_inicial)
        else:
            # Calcula quantos vendedores adicionais s√£o necess√°rios
            meta_anterior = metas_mensais[i-1]
            vendedores_anterior = vendedores_por_mes[i-1]
            
            # Se a meta aumentou mais de 20% em rela√ß√£o ao m√™s anterior, adiciona um vendedor
            if meta > meta_anterior * 1.2:
                vendedores_por_mes.append(vendedores_anterior + 1)
            else:
                vendedores_por_mes.append(vendedores_anterior)
    
    return metas_mensais, vendedores_por_mes

def ajustar_meta_por_vendedores(meta_mensal, n_vendedores, dias_uteis, etapa, taxas, max_reunioes_por_dia=4):
    """Ajusta a meta mensal baseada no n√∫mero de vendedores e limite de reuni√µes por dia."""
    # Calcula o m√°ximo de reuni√µes poss√≠veis por m√™s
    max_reunioes_mes = n_vendedores * dias_uteis * max_reunioes_por_dia
    
    # Se for a etapa de reuni√µes, aplica o limite direto
    if etapa == "Reuni√£o Ocorrida":
        return min(meta_mensal, max_reunioes_mes)
    
    # Para outras etapas, calcula quantas s√£o necess√°rias para atingir a meta de reuni√µes
    # Encontra a taxa de convers√£o at√© reuni√µes
    taxa_ate_reunioes = 1.0
    for e in etapas:
        if e == "Reuni√£o Ocorrida":
            break
        if e in taxas:
            taxa_ate_reunioes *= taxas[e]
    
    # Calcula quantas s√£o necess√°rias na etapa atual para atingir a meta de reuni√µes
    meta_ajustada = meta_mensal / taxa_ate_reunioes
    
    return round(meta_ajustada)

def get_dias_uteis_mes(ano, mes):
    """Calcula os dias √∫teis do m√™s considerando:
    - Feriados nacionais
    - Dias antes e depois de feriados contam como meio dia
    """
    # Lista de feriados nacionais
    feriados = holidays.BR()
    
    # Obter o primeiro e √∫ltimo dia do m√™s
    primeiro_dia = datetime(ano, mes, 1)
    ultimo_dia = datetime(ano, mes, calendar.monthrange(ano, mes)[1])
    
    # Lista de todos os dias do m√™s
    dias = [primeiro_dia + timedelta(days=x) for x in range((ultimo_dia - primeiro_dia).days + 1)]
    
    # Calcular dias √∫teis
    dias_uteis = 0
    for dia in dias:
        # Se for fim de semana, pula
        if dia.weekday() >= 5:  # 5 = S√°bado, 6 = Domingo
            continue
            
        # Se for feriado, pula
        if dia in feriados:
            continue
            
        # Se for dia antes ou depois de feriado, conta como meio dia
        dia_anterior = dia - timedelta(days=1)
        dia_posterior = dia + timedelta(days=1)
        if dia_anterior in feriados or dia_posterior in feriados:
            dias_uteis += 0.5
        else:
            dias_uteis += 1
    
    # Arredondar para baixo
    return int(dias_uteis)

def get_meses_restantes():
    """Retorna lista de meses restantes do ano atual a partir do pr√≥ximo m√™s."""
    hoje = datetime.now()
    ano_atual = hoje.year
    mes_atual = hoje.month
    
    # Lista de meses em portugu√™s
    meses_pt = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
    
    # Retorna meses restantes
    return [(meses_pt[i-1], i, ano_atual) for i in range(mes_atual + 1, 13)]

def ajustar_meta_por_dias_uteis(meta_mensal, dias_uteis_mes, dias_uteis_padrao=21):
    """Ajusta a meta mensal baseada na quantidade de dias √∫teis do m√™s."""
    return round(meta_mensal * (dias_uteis_mes / dias_uteis_padrao))

def exibir_calculadora():
    # Aplicar cor laranja ao t√≠tulo principal
    st.markdown("<h1 style='color: #FF8C00;'>Calculadora de Metas & Proje√ß√£o de Funil</h1>", unsafe_allow_html=True)

    # Verificar se temos dados do ICP
    if "icp_data" not in st.session_state or st.session_state["icp_data"] is None:
        st.warning("Por favor, primeiro carregue os dados na aba 'An√°lise de ICP'")
        return

    meses_restantes = get_meses_restantes()

    # Carregar valores salvos da sess√£o ou usar padr√µes
    valores_salvos = st.session_state.get("metas_data", {
        "segmento": list(base_taxas.keys())[0],
        "tipo_obj": "Faturamento",
        "val_obj": 1_000_000.0,
        "n_vend": 5
    })

    segmento = st.selectbox("Segmento da Empresa", list(base_taxas.keys()), 
                           index=list(base_taxas.keys()).index(valores_salvos["segmento"]))
    tipo_obj = st.selectbox("Tipo de Objetivo Anual", ["Clientes", "MRR", "Faturamento"], 
                           index=["Clientes", "MRR", "Faturamento"].index(valores_salvos["tipo_obj"]))
    val_obj = st.number_input("Valor Anual de Objetivo", min_value=0.0, 
                             value=valores_salvos["val_obj"], step=10_000.0, format="%.2f")

    col1, col2 = st.columns(2)
    with col1:
        n_vend = st.number_input("N√∫mero Inicial de Vendedores", min_value=1, 
                                value=valores_salvos["n_vend"], step=1)
    with col2:
        # Usar a m√©dia simples da coluna ticket_medio
        df = st.session_state["icp_data"]["df"]
        ticket = df["ticket_medio"].mean()
        # Aplicar cor laranja ao valor do Ticket M√©dio
        st.markdown(f"<p style='color: #F0F0F0; font-size: 1.2em;'>Ticket M√©dio (R$)</p>", unsafe_allow_html=True)
        st.markdown(f"<h3 style='color: #FF8C00;'>{formatar_numero_br(ticket)}</h3>", unsafe_allow_html=True)

    # Salvar valores atuais na sess√£o
    st.session_state["metas_data"] = {
        "segmento": segmento,
        "tipo_obj": tipo_obj,
        "val_obj": val_obj,
        "n_vend": n_vend
    }

    # Bot√µes para calcular/recalcular
    col1, col2 = st.columns([1, 3])
    with col1:
        calcular = st.button("Calcular Metas e Funil")
        if "metas_calculadas" in st.session_state:
            recalcular = st.button("Recalcular")
        else:
            recalcular = False

    # Mostrar resultados apenas se j√° foram calculados e n√£o estamos recalculando
    if "metas_calculadas" in st.session_state and not recalcular and not calcular:
        dados = st.session_state["metas_calculadas"]
        
        # Aplicar cor laranja ao t√≠tulo da se√ß√£o
        st.markdown("### <span style='color: #FF8C00;'>Taxas de Convers√£o Utilizadas:</span>", unsafe_allow_html=True)
        
        # Criar DataFrame para taxas edit√°veis
        taxas_editaveis = pd.DataFrame({
            "Etapa": dados["df_taxas"]["Etapa"],
            "Taxa Usada": dados["df_taxas"]["Taxa Usada"].astype(str).str.rstrip("%").astype(float)
        })
        
        # Configurar o editor de dados
        taxas_editadas = st.data_editor(
            taxas_editaveis,
            column_config={
                "Etapa": st.column_config.TextColumn(
                    "Etapa",
                    disabled=True
                ),
                "Taxa Usada": st.column_config.NumberColumn(
                    "Taxa Usada (%)",
                    min_value=0.0,
                    max_value=100.0,
                    step=1.0,
                    format="%.0f"
                )
            },
            hide_index=True
        )
        
        # Bot√£o para restaurar taxas padr√£o
        if st.button("Restaurar Taxas Padr√£o"):
            taxas_editadas = taxas_editaveis.copy()
            st.rerun()
        
        # Converter taxas editadas para o formato do funil (removendo o % e convertendo para float)
        taxas_atualizadas = {etapa: float(str(taxa).rstrip("%"))/100 for etapa, taxa in zip(taxas_editadas["Etapa"], taxas_editadas["Taxa Usada"])}
        
        # Recalcular proje√ß√£o com as taxas atualizadas
        proj = calcular_projecao(etapas, taxas_atualizadas, dados["metas"].loc["Clientes/M√™s", "Valor"])
        
        # Criar DataFrame com meses restantes e dias √∫teis
        df_proj = pd.DataFrame({
            "M√™s": [mes for mes, _, _ in meses_restantes],
            "Dias √öteis": [get_dias_uteis_mes(ano, mes) for _, mes, ano in meses_restantes]
        })
        
        # Adicionar coluna de Vendedores e inicializar
        df_proj["Vendedores"] = 0 # Inicializar com zero

        # Calcular meta mensal de clientes/vendas base
        meta_clients_mensal_base = dados["metas"].loc["Clientes/M√™s", "Valor"]

        # Calcular o total de clientes/vendas a serem atingidos nos meses restantes
        total_clients_restante = meta_clients_mensal_base * 12 # Usando a meta mensal base para calcular o total anual

        # Se o objetivo anual foi definido como MRR ou Faturamento, converter de volta para clientes usando o ticket m√©dio
        if tipo_obj in ["MRR", "Faturamento"]:
            ticket_medio_atual = df["ticket_medio"].mean()
            if ticket_medio_atual > 0:
                # Ajustar para o total necess√°rio no per√≠odo restante (considerando meses restantes)
                total_clients_restante = val_obj / ticket_medio_atual
                if tipo_obj == "MRR": # MRR √© anualizado na meta geral, ent√£o dividimos por 12 para obter o valor mensal
                    total_clients_restante = total_clients_restante / 12 * len(meses_restantes)
                else: # Faturamento Anual
                    total_clients_restante = total_clients_restante / 12 * len(meses_restantes)
            else:
                total_clients_restante = 0

        # Distribuir a meta total de clientes/vendas gradualmente ao longo dos meses restantes
        # Usando uma progress√£o linear simples do 1¬∫ ao √∫ltimo m√™s restante
        # A meta do primeiro m√™s ser√° proporcionalmente menor e do √∫ltimo maior
        num_meses_restantes = len(meses_restantes)
        metas_clientes_mensais_graduais = np.linspace(
            total_clients_restante / num_meses_restantes * 0.7, # Come√ßa com 70% da m√©dia para um crescimento suave
            total_clients_restante / num_meses_restantes * 1.3, # Termina com 130% da m√©dia
            num_meses_restantes
        )

        # Iterar sobre os meses restantes para calcular as metas por etapa
        for i, (mes_nome, mes_num, ano) in enumerate(meses_restantes):
            dias_uteis = df_proj.loc[i, "Dias √öteis"]
            
            # A meta de vendas para este m√™s √© a meta gradual calculada
            meta_venda_mensal = metas_clientes_mensais_graduais[i]
            
            # 1. Calcular Reuni√µes Ocorridas Necess√°rias para atingir a meta de Clientes/Vendas
            reunioes_necessarias = 0
            # Trabalhando de tr√°s para frente: Venda <- Oportunidade (SQL) <- Reuni√£o Ocorrida
            taxa_oportunidade_venda = taxas_atualizadas.get("Oportunidade (SQL)", 0.0)
            taxa_reuniao_oportunidade = taxas_atualizadas.get("Reuni√£o Ocorrida", 0.0)

            if taxa_oportunidade_venda > 0 and taxa_reuniao_oportunidade > 0:
                 reunioes_necessarias = meta_venda_mensal / taxa_oportunidade_venda / taxa_reuniao_oportunidade

            # Arredondar para cima, pois n√£o se pode ter fra√ß√£o de reuni√£o
            reunioes_necessarias = int(np.ceil(reunioes_necessarias))
            
            # 2. Calcular o n√∫mero m√≠nimo de vendedores necess√°rios para realizar essas reuni√µes
            vendedores_necessarios_min = 0
            if dias_uteis > 0 and 4 > 0: # 4 reuni√µes por dia por vendedor
                vendedores_necessarios_min = reunioes_necessarias / (dias_uteis * 4)
            vendedores_necessarios_min = int(np.ceil(vendedores_necessarios_min)) # Arredonda para cima

            # 3. Ajustar o n√∫mero de vendedores para o m√™s atual
            if i > 0:
                 vendedores_no_mes_anterior = df_proj.loc[i-1, "Vendedores"]
                 # O n√∫mero de vendedores no m√™s atual √© o maior entre o do m√™s anterior e o m√≠nimo necess√°rio
                 df_proj.loc[i, "Vendedores"] = max(vendedores_no_mes_anterior, vendedores_necessarios_min)
            else:
                 # Primeiro m√™s usa o maior entre o n√∫mero inicial de vendedores e o m√≠nimo necess√°rio
                 df_proj.loc[i, "Vendedores"] = max(n_vend, vendedores_necessarios_min)
            
            # 4. Preencher a linha do DataFrame com as metas para o m√™s
            df_proj.loc[i, "Reuni√£o Ocorrida Necess√°rios"] = reunioes_necessarias

            # Calcular etapas anteriores (trabalhando de tr√°s para frente a partir de Reuni√£o Ocorrida)
            meta_atual = reunioes_necessarias
            # Itera sobre as etapas de tr√°s para frente, excluindo a √∫ltima ('Venda') e 'Reuni√£o Ocorrida'
            for etapa in reversed(etapas[:etapas.index("Reuni√£o Ocorrida")]):
                # A taxa de convers√£o usada √© da etapa ATUAL para a PR√ìXIMA etapa no funil
                if etapa in taxas_atualizadas and taxas_atualizadas[etapa] > 0:
                    meta_atual = meta_atual / taxas_atualizadas[etapa]
                    df_proj.loc[i, f"{etapa} Necess√°rios"] = int(np.ceil(meta_atual))
                else:
                     df_proj.loc[i, f"{etapa} Necess√°rios"] = 0 # Evita divis√£o por zero ou taxa inexistente

            # Calcular etapas posteriores (trabalhando de frente para tr√°s a partir de Reuni√£o Ocorrida)
            meta_atual = reunioes_necessarias
            # Itera sobre as etapas de frente para tr√°s, come√ßando ap√≥s 'Reuni√£o Ocorrida'
            for etapa in etapas[etapas.index("Reuni√£o Ocorrida") + 1:]:
                 # A taxa de convers√£o usada √© da etapa ANTERIOR para a etapa ATUAL
                 etapa_anterior = etapas[etapas.index(etapa) - 1]
                 if etapa_anterior in taxas_atualizadas:
                    meta_atual = meta_atual * taxas_atualizadas[etapa_anterior]
                    df_proj.loc[i, f"{etapa} Necess√°rios"] = round(meta_atual)
                 else:
                    df_proj.loc[i, f"{etapa} Necess√°rios"] = 0 # Taxa de convers√£o inexistente
            
        st.markdown("**Metas Gerais**")
        metas_formatadas = dados["metas"].copy()
        metas_formatadas["Valor"] = metas_formatadas["Valor"].apply(formatar_numero_br)
        # Aplicar estilos √† tabela de Metas Gerais - cores e fontes s√£o limitadas em tabelas padr√£o do Streamlit
        # Podemos tentar aplicar um fundo escuro e texto claro via CSS global se necess√°rio
        st.table(metas_formatadas)

        # Aplicar cor laranja ao t√≠tulo da se√ß√£o
        st.markdown("### <span style='color: #FF8C00;'>Proje√ß√£o Mensal de Funil Necess√°rio</span>", unsafe_allow_html=True)
        df_proj_formatado = formatar_dataframe_br(df_proj)
        # Aplicar estilos ao DataFrame de Proje√ß√£o - cores e fontes s√£o limitadas em dataframes padr√£o do Streamlit
        # Podemos tentar aplicar um fundo escuro e texto claro via CSS global se necess√°rio
        st.dataframe(df_proj_formatado, hide_index=True)
        
        # Bot√µes de exporta√ß√£o apenas para a proje√ß√£o do funil
        exibir_botoes_exportacao(df_proj, "projecao_funil")

    # Calcular apenas quando solicitado
    elif calcular or recalcular:
        if tipo_obj == "Clientes":
            obj_clients = val_obj
            obj_revenue = val_obj * ticket
        elif tipo_obj == "MRR":
            obj_revenue = val_obj * 12
            obj_clients = obj_revenue / ticket if ticket else 0
        else:
            obj_revenue = val_obj
            obj_clients = obj_revenue / ticket if ticket else 0

        meta_clients_mes = obj_clients / 12
        meta_rev_mes     = obj_revenue / 12
        meta_rev_vend    = meta_rev_mes / n_vend

        faixa = identificar_faixa(segmento, ticket)
        ajuste = ajuste_por_faixa[faixa]
        taxas = calcular_funil(base_taxas[segmento], ajuste)

        df_taxas = pd.DataFrame([
            {"Etapa": etapa, "Taxa Usada": taxas[etapa]*100} for etapa in etapas[:-1]
        ])
        
        st.markdown("**Taxas de Convers√£o Utilizadas:**")
        taxas_editadas = st.data_editor(
            df_taxas,
            hide_index=True,
            column_config={
                "Etapa": st.column_config.TextColumn("Etapa", disabled=True),
                "Taxa Usada": st.column_config.NumberColumn(
                    "Taxa Usada (%)",
                    min_value=0.0,
                    max_value=100.0,
                    step=1.0,
                    format="%.0f"
                )
            }
        )
        
        # Bot√£o para restaurar taxas padr√£o
        if st.button("Restaurar Taxas Padr√£o"):
            taxas = calcular_funil(base_taxas[segmento], ajuste)
            taxas_editadas = pd.DataFrame([
                {"Etapa": etapa, "Taxa Usada": taxas[etapa]*100} for etapa in etapas[:-1]
            ])
            st.rerun()
        
        # Converter taxas editadas para o formato do funil (removendo o % e convertendo para float)
        taxas_atualizadas = {etapa: float(str(taxa).rstrip("%"))/100 for etapa, taxa in zip(taxas_editadas["Etapa"], taxas_editadas["Taxa Usada"])}
        
        # Recalcular proje√ß√£o com as taxas atualizadas
        proj = calcular_projecao(etapas, taxas_atualizadas, meta_clients_mes)

        # Criar DataFrame com meses restantes e dias √∫teis
        df_proj = pd.DataFrame({
            "M√™s": [mes for mes, _, _ in meses_restantes],
            "Dias √öteis": [get_dias_uteis_mes(ano, mes) for _, mes, ano in meses_restantes]
        })
        
        # Adicionar coluna de Vendedores e inicializar
        df_proj["Vendedores"] = 0 # Inicializar com zero

        # Calcular meta mensal de clientes/vendas base
        meta_clients_mensal_base = meta_clients_mes

        # Calcular o total de clientes/vendas a serem atingidos nos meses restantes
        total_clients_restante = meta_clients_mensal_base * 12 # Usando a meta mensal base para calcular o total anual

        # Distribuir a meta total de clientes/vendas gradualmente ao longo dos meses restantes
        # Usando uma progress√£o linear simples do 1¬∫ ao √∫ltimo m√™s restante
        # A meta do primeiro m√™s ser√° proporcionalmente menor e do √∫ltimo maior
        num_meses_restantes = len(meses_restantes)
        metas_clientes_mensais_graduais = np.linspace(
            total_clients_restante / num_meses_restantes * 0.7, # Come√ßa com 70% da m√©dia para um crescimento suave
            total_clients_restante / num_meses_restantes * 1.3, # Termina com 130% da m√©dia
            num_meses_restantes
        )

        # Iterar sobre os meses restantes para calcular as metas por etapa
        for i, (mes_nome, mes_num, ano) in enumerate(meses_restantes):
            dias_uteis = df_proj.loc[i, "Dias √öteis"]
            
            # A meta de vendas para este m√™s √© a meta gradual calculada
            meta_venda_mensal = metas_clientes_mensais_graduais[i]
            
            # 1. Calcular Reuni√µes Ocorridas Necess√°rias para atingir a meta de Clientes/Vendas
            reunioes_necessarias = 0
            # Trabalhando de tr√°s para frente: Venda <- Oportunidade (SQL) <- Reuni√£o Ocorrida
            taxa_oportunidade_venda = taxas_atualizadas.get("Oportunidade (SQL)", 0.0)
            taxa_reuniao_oportunidade = taxas_atualizadas.get("Reuni√£o Ocorrida", 0.0)

            if taxa_oportunidade_venda > 0 and taxa_reuniao_oportunidade > 0:
                 reunioes_necessarias = meta_venda_mensal / taxa_oportunidade_venda / taxa_reuniao_oportunidade

            # Arredondar para cima, pois n√£o se pode ter fra√ß√£o de reuni√£o
            reunioes_necessarias = int(np.ceil(reunioes_necessarias))
            
            # 2. Calcular o n√∫mero m√≠nimo de vendedores necess√°rios para realizar essas reuni√µes
            vendedores_necessarios_min = 0
            if dias_uteis > 0 and 4 > 0: # 4 reuni√µes por dia por vendedor
                vendedores_necessarios_min = reunioes_necessarias / (dias_uteis * 4)
            vendedores_necessarios_min = int(np.ceil(vendedores_necessarios_min)) # Arredonda para cima

            # 3. Ajustar o n√∫mero de vendedores para o m√™s atual
            if i > 0:
                 vendedores_no_mes_anterior = df_proj.loc[i-1, "Vendedores"]
                 # O n√∫mero de vendedores no m√™s atual √© o maior entre o do m√™s anterior e o m√≠nimo necess√°rio
                 df_proj.loc[i, "Vendedores"] = max(vendedores_no_mes_anterior, vendedores_necessarios_min)
            else:
                 # Primeiro m√™s usa o maior entre o n√∫mero inicial de vendedores e o m√≠nimo necess√°rio
                 df_proj.loc[i, "Vendedores"] = max(n_vend, vendedores_necessarios_min)
            
            # 4. Preencher a linha do DataFrame com as metas para o m√™s
            df_proj.loc[i, "Reuni√£o Ocorrida Necess√°rios"] = reunioes_necessarias

            # Calcular etapas anteriores (trabalhando de tr√°s para frente a partir de Reuni√£o Ocorrida)
            meta_atual = reunioes_necessarias
            # Itera sobre as etapas de tr√°s para frente, excluindo a √∫ltima ('Venda') e 'Reuni√£o Ocorrida'
            for etapa in reversed(etapas[:etapas.index("Reuni√£o Ocorrida")]):
                # A taxa de convers√£o usada √© da etapa ATUAL para a PR√ìXIMA etapa no funil
                if etapa in taxas_atualizadas and taxas_atualizadas[etapa] > 0:
                    meta_atual = meta_atual / taxas_atualizadas[etapa]
                    df_proj.loc[i, f"{etapa} Necess√°rios"] = int(np.ceil(meta_atual))
                else:
                     df_proj.loc[i, f"{etapa} Necess√°rios"] = 0 # Evita divis√£o por zero ou taxa inexistente

            # Calcular etapas posteriores (trabalhando de frente para tr√°s a partir de Reuni√£o Ocorrida)
            meta_atual = reunioes_necessarias
            # Itera sobre as etapas de frente para tr√°s, come√ßando ap√≥s 'Reuni√£o Ocorrida'
            for etapa in etapas[etapas.index("Reuni√£o Ocorrida") + 1:]:
                 # A taxa de convers√£o usada √© da etapa ANTERIOR para a etapa ATUAL
                 etapa_anterior = etapas[etapas.index(etapa) - 1]
                 if etapa_anterior in taxas_atualizadas:
                    meta_atual = meta_atual * taxas_atualizadas[etapa_anterior]
                    df_proj.loc[i, f"{etapa} Necess√°rios"] = round(meta_atual)
                 else:
                    df_proj.loc[i, f"{etapa} Necess√°rios"] = 0 # Taxa de convers√£o inexistente
            
        st.markdown("**Metas Gerais**")
        metas = pd.DataFrame([
            {"Descri√ß√£o": "Clientes/M√™s",     "Valor": round(meta_clients_mensal_base)},
            {"Descri√ß√£o": "Receita/M√™s (R$)", "Valor": round(meta_rev_mes)},
            {"Descri√ß√£o": "Receita/Vendedor (R$)", "Valor": round(meta_rev_vend)},
        ]).set_index("Descri√ß√£o")
        
        metas_formatadas = metas.copy()
        metas_formatadas["Valor"] = metas_formatadas["Valor"].apply(formatar_numero_br)
        # Aplicar estilos √† tabela de Metas Gerais
        st.table(metas_formatadas)

        # Aplicar cor laranja ao t√≠tulo da se√ß√£o
        st.markdown("### <span style='color: #FF8C00;'>Proje√ß√£o Mensal de Funil Necess√°rio</span>", unsafe_allow_html=True)
        df_proj_formatado = formatar_dataframe_br(df_proj)
        # Aplicar estilos ao DataFrame de Proje√ß√£o
        st.dataframe(df_proj_formatado, hide_index=True)
        
        # Bot√µes de exporta√ß√£o apenas para a proje√ß√£o do funil
        exibir_botoes_exportacao(df_proj, "projecao_funil")

        # Salvar resultados na sess√£o
        st.session_state["metas_calculadas"] = {
            "faixa": faixa,
            "ajuste": ajuste,
            "df_taxas": taxas_editadas,
            "metas": metas,
            "df_proj": df_proj
        }
